According to copilot AI:
- body {height:100vh} doesn’t automatically make 
the grid fit inside that space — it makes the body 
the height of the viewport but still allows its 
children to overflow.
    - Also using body {width:100vw} in conjuction 
    with height can cause a horizontal scrollbar 
    when the vertical scrollbar consumes some of 
    the viewport width.

===========================================

- The combination of the CSS "aspect-ratio" property
and the "align-items:stretch" default value was
preventing the squares of shrinking vertically.
    - The squares having a stretched width caused
    the squares to have a stretched height due to
    the "aspect-ratio" property.
        - The increased square height caused the 
        grid to overflow in the y direction over 
        the page.
        - Finally, setting "min-height:0" on the row
        flex items allowed them to shrink. This 
        would only shrink them in the y direction 
        though, causing the squares to retain their
        stretched width.
        - Thus, using "align-items:center" prevented
        the stretched width."min-height:0" will
        act as a backup for when the row width 
        grows too large, and the squares must be
        still be shrunk in the y direction to
        prevent overflow.

==============================================

- NodeReference.replaceChildren()
    - With no arguments, the method will remove
    all child nodes from an element node.

- Was able to generate rgb values from math.random(),
and created the actual rgb declaration using a 
template string. It wouldn't work otherwise.
    - The template string: `rgb(${r}, ${g}, ${b})`
    - I would guess that this is necessary because
    CSS property values are stored as strings?